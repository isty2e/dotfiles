[
  {
    "context": "VimControl && !menu",
    "bindings": {
      "u": ["vim::PushObject", { "around": false }],
      "ctrl-n": "vim::Down",
      "n": "vim::Down",
      "e": "vim::Up",
      "i": "vim::Right",

      // Word motions
      "j": "vim::NextWordEnd",
      "g j": "vim::PreviousWordEnd",
      // Subword motions
      // "w": "vim::NextSubwordStart",
      // "b": "vim::PreviousSubwordStart",
      // "e": "vim::NextSubwordEnd",
      // "g e": "vim::PreviousSubwordEnd",
      "shift-j": ["vim::NextWordEnd", { "ignore_punctuation": true }],
      "g shift-j": ["vim::PreviousWordEnd", { "ignore_punctuation": true }],
      "k": "vim::MoveToNextMatch",
      "shift-k": "vim::MoveToPreviousMatch",
      "ctrl-i": "pane::GoForward",
      "shift-n": "editor::Hover",
      "ctrl-u": "vim::ScrollUp",
      "ctrl-j": "vim::LineDown",
      // "g" commands
      "g r i": "editor::GoToImplementation",
      "g shift-u": "editor::GoToImplementation",
      "g k": "vim::SelectNextMatch",
      "g shift-k": "vim::SelectPreviousMatch",
      "g i": "vim::SelectNext",
      "g shift-i": "vim::SelectPrevious",
      "g n": ["vim::Down", { "display_lines": true }],
      "g e": ["vim::Up", { "display_lines": true }],
      "g u": "vim::InsertAtPrevious",
      "shift-l": "vim::WindowBottom",
      // z commands
      "z l": "vim::ColumnRight",
      "z shift-l": "vim::HalfPageRight"
    }
  },
  {
    "context": "Editor && vim_mode == normal && !VimWaiting && !menu",
    "bindings": {
      // put key-bindings here if you want them to work only in normal mode
      ", .": "pane::ActivateNextItem",
      ", m": "pane::ActivatePreviousItem"
    }
  },
  {
    "context": "Editor && vim_mode == helix_normal && !VimWaiting && !menu",
    "bindings": {
      // put key-bindings here if you want them to work only in normal mode
      ", .": "pane::ActivateNextItem",
      ", m": "pane::ActivatePreviousItem"
    }
  },
  {
    "context": "vim_mode == normal || vim_mode == visual || vim_mode == operator",
    "bindings": {
      "[ e": "editor::MoveLineUp",
      "] e": "editor::MoveLineDown"
    }
  },
  {
    "context": "vim_mode == normal",
    "bindings": {
      "u": "vim::InsertBefore",
      "g shift-n": "vim::JoinLinesNoWhitespace"
    }
  },
  {
    "context": "vim_mode == visual",
    "bindings": {
      "shift-u": "vim::InsertBefore",
      "g shift-u": "vim::VisualInsertFirstNonWhiteSpace",
      "shift-n": "vim::JoinLines",
      "g shift-n": "vim::JoinLinesNoWhitespace",
      "u": ["vim::PushObject", { "around": false }]
    }
  },
  {
    "context": "vim_mode == helix_select",
    "bindings": {
      "shift-n": "vim::JoinLines",
      "u": "vim::InsertBefore"
    }
  },
  {
    "context": "vim_mode == insert",
    "bindings": {
      "ctrl-x ctrl-i": "editor::ToggleCodeActions", // zed specific
      "ctrl-x ctrl-j": "vim::LineDown",
      "ctrl-u": "editor::DeleteToBeginningOfLine",
      "ctrl-j": "vim::InsertFromBelow",
      "ctrl-n": ["vim::PushDigraph", {}]
    }
  },
  {
    "context": "showing_completions",
    "bindings": {
      "ctrl-j": "vim::LineDown"
    }
  },
  {
    "context": "(vim_mode == normal || vim_mode == helix_normal) && !menu",
    "bindings": {
      "shift-n": "vim::JoinLines",
      "shift-u": "vim::InsertFirstNonWhitespace",
      "l": "vim::Undo",
      "shift-l": "vim::UndoLastLine"
    }
  },
  {
    "context": "vim_mode == helix_normal && !menu",
    "bindings": {
      "u": "vim::HelixInsert"
    }
  },
  {
    "context": "(vim_mode == helix_normal || vim_mode == helix_select) && !menu",
    "bindings": {
      "i": "vim::WrappingRight",
      "g u": "vim::PushLowercase",
      "g shift-u": "vim::PushUppercase",
      // Goto mode
      "g k": "pane::ActivateNextItem",
      // "tab": "pane::ActivateNextItem",
      // "shift-tab": "pane::ActivatePrevItem",
      "shift-i": "pane::ActivateNextItem",
      "g i": "vim::EndOfLine",
      "g j": "vim::EndOfDocument",

      // Window mode
      "space w i": "workspace::ActivatePaneRight",
      "space w e": "workspace::ActivatePaneUp",
      "space w n": "workspace::ActivatePaneDown",
      // Space mode
      "space n": "editor::Hover"
    }
  },
  {
    "context": "vim_mode == insert && !(showing_code_actions || showing_completions)",
    "bindings": {
      "ctrl-k": "editor::ShowWordCompletions"
    }
  },
  {
    "context": "(vim_mode == insert || vim_mode == normal) && showing_signature_help && !showing_completions",
    "bindings": {
      "ctrl-k": "editor::SignatureHelpNext"
    }
  },
  {
    "context": "vim_mode == replace",
    "bindings": {
      "ctrl-n": ["vim::PushDigraph", {}]
    }
  },
  {
    "context": "vim_mode == waiting",
    "bindings": {
      "ctrl-n": ["vim::PushDigraph", {}]
    }
  },
  {
    "context": "vim_operator == a || vim_operator == i || vim_operator == cs || vim_operator == helix_next || vim_operator == helix_previous",
    "bindings": {
      // Subword TextObject
      "i": "vim::IndentObj",
      "shift-i": ["vim::IndentObj", { "include_below": true }],
      "j": "vim::EntireFile"
    }
  },
  {
    "context": "vim_operator == d",
    "bindings": {
      "l": "git::StageAndNext", // "d u"
      "shift-l": "git::UnstageAndNext" // "d shift-u"
    }
  },
  {
    "context": "vim_operator == gu",
    "bindings": {
      "g l": "vim::CurrentLine",
      "l": "vim::CurrentLine"
    }
  },
  {
    "context": "vim_operator == gU",
    "bindings": {
      "g shift-l": "vim::CurrentLine",
      "shift-l": "vim::CurrentLine"
    }
  },
  {
    "context": "VimControl || !Editor && !Terminal",
    "bindings": {
      // window related commands (ctrl-w X)
      "ctrl-w ctrl-i": "workspace::ActivatePaneRight",
      "ctrl-w ctrl-e": "workspace::ActivatePaneUp",
      "ctrl-w ctrl-n": "workspace::ActivatePaneDown",
      "ctrl-w i": "workspace::ActivatePaneRight",
      "ctrl-w e": "workspace::ActivatePaneUp",
      "ctrl-w n": "workspace::ActivatePaneDown",
      "ctrl-w shift-i": "workspace::SwapPaneRight",
      "ctrl-w shift-e": "workspace::SwapPaneUp",
      "ctrl-w shift-n": "workspace::SwapPaneDown"
    }
  },
  {
    // netrw compatibility
    "context": "ProjectPanel && not_editing",
    "bindings": {
      "n": "menu::SelectNext",
      "e": "menu::SelectPrevious",
      "i": "project_panel::ExpandSelectedEntry"
    }
  },
  {
    "context": "OutlinePanel && not_editing",
    "bindings": {
      "n": "menu::SelectNext",
      "e": "menu::SelectPrevious"
    }
  },
  {
    "context": "GitPanel && ChangesList",
    "use_key_equivalents": true,
    "bindings": {
      "e": "menu::SelectPrevious",
      "n": "menu::SelectNext",
      "u": "git_panel::FocusEditor"
    }
  },
  {
    "context": "Editor && mode == auto_height && VimControl",
    "bindings": {
      // TODO: Implement search
      "k": null,
      "shift-k": null
    }
  },
  {
    "context": "Picker > Editor",
    "bindings": {
      "ctrl-l": "editor::DeleteToBeginningOfLine"
    }
  },
  {
    "context": "os != macos && Editor && edit_prediction_conflict",
    "bindings": {
      // alt-l is provided as an alternative to tab/alt-tab. and will be displayed in the UI. This
      // is because alt-tab may not be available, as it is often used for window switching on Linux
      // and Windows.
      "alt-l": "editor::AcceptEditPrediction"
    }
  }
]
